}
}
hist(th)
mean(th)
th
k
a
#y<-frax$fraudRisk
m<-3
for(j in 1:m){
ky<-frax[frax$Segmento==j,8]
unos<-sum(ky)
dif<-length(ky)-unos
for (t in 1:length(ky)){
k<-rgamma(1,1,.01)
mu<-rbeta(1,.1,.1)
a[t]<-mu*k
b[t]<-(1-mu)*k
th[t]<-rbeta(1,a[t]+unos,b[t]+dif)
ky[t]<-rbernoulli(1,th[t])
}
#y<-frax$fraudRisk
m<-3
for(j in 1:m){
ky<-frax[frax$Segmento==j,8]
unos<-sum(ky)
dif<-length(ky)-unos
for (t in 1:length(ky)){
k<-rgamma(1,1,.01)
mu<-rbeta(1,.1,.1)
a[t]<-mu*k
b[t]<-(1-mu)*k
th[t]<-rbeta(1,a[t]+unos,b[t]+dif)
ky[t]<-rbernoulli(1,th[t])
}
}
ky
hist(th)
th
zeros(2)
a
b
#y<-frax$fraudRisk
m<-3
for(j in 1:m){
ky<-frax[frax$Segmento==j,8]
unos<-sum(ky)
dif<-length(ky)-unos
a<-rep(0,length(ky))
b<-rep(0,length(ky))
th<-rep(0,length(ky))
for (t in 1:length(ky)){
k<-rgamma(1,1,.01)
mu<-rbeta(1,.1,.1)
a[t]<-mu*k
b[t]<-(1-mu)*k
th[t]<-rbeta(1,a[t]+unos,b[t]+dif)
ky[t]<-rbernoulli(1,th[t])
}
}
th
hist(th)
mean(th)
mean(y)
mean(ky)
mean(frax[frax$Segmento==3,8)
mean(frax[frax$Segmento==3,8])
#y<-frax$fraudRisk
m<-3
N<-1000
for(j in 1:m){
ky<-frax[frax$Segmento==j,8]
unos<-sum(ky)
dif<-length(ky)-unos
a<-rep(0,N)
b<-rep(0,N)
th<-rep(0,N)
for (t in 1:N){
k<-rgamma(1,1,.01)
mu<-rbeta(1,.1,.1)
a[t]<-mu*k
b[t]<-(1-mu)*k
th[t]<-rbeta(1,a[t]+unos,b[t]+dif)
ky[t]<-rbernoulli(1,th[t])
}
}
#y<-frax$fraudRisk
m<-3
N<-10000
for(j in 1:m){
ky<-frax[frax$Segmento==j,8]
unos<-sum(ky)
dif<-length(ky)-unos
a<-rep(0,N)
b<-rep(0,N)
th<-rep(0,N)
for (t in 1:N){
k<-rgamma(1,1,.01)
mu<-rbeta(1,.1,.1)
a[t]<-mu*k
b[t]<-(1-mu)*k
th[t]<-rbeta(1,a[t]+unos,b[t]+dif)
ky[t]<-rbernoulli(1,th[t])
}
}
hist(th)
mean(th)
mean(ky)
m<-3
N<-10000
for(j in 1:m){
ky<-frax[frax$Segmento==j,8]
unos<-sum(ky)
dif<-length(ky)-unos
a<-rep(0,N)
b<-rep(0,N)
th<-rep(0,N)
for (t in 1:N){
k<-rgamma(1,1,.01)
mu<-rbeta(1,.1,.1)
a[t,j]<-mu*k
b[t,j]<-(1-mu)*k
th[t,j]<-rbeta(1,a[t,j]+unos,b[t,j]+dif)
ky[t,j]<-rbernoulli(1,th[t,j])
}
}
#y<-frax$fraudRisk
m<-3
N<-10000
a<-matrix(0L, N, m)
b<-matrix(0L, N, m)
th<-matrix(0L, N, m)
for(j in 1:m){
ky<-frax[frax$Segmento==j,8]
unos<-sum(ky)
dif<-length(ky)-unos
#a<-rep(0,N)
#b<-rep(0,N)
#th<-rep(0,N)
for (t in 1:N){
k<-rgamma(1,1,.01)
mu<-rbeta(1,.1,.1)
a[t,j]<-mu*k
b[t,j]<-(1-mu)*k
th[t,j]<-rbeta(1,a[t,j]+unos,b[t,j]+dif)
ky[t,j]<-rbernoulli(1,th[t,j])
}
}
#y<-frax$fraudRisk
m<-3
N<-10000
a<-matrix(0L, N, m)
b<-matrix(0L, N, m)
th<-matrix(0L, N, m)
wy<-matrix(0L, N, m)
for(j in 1:m){
ky<-frax[frax$Segmento==j,8]
unos<-sum(ky)
dif<-length(ky)-unos
#a<-rep(0,N)
#b<-rep(0,N)
#th<-rep(0,N)
for (t in 1:N){
k<-rgamma(1,1,.01)
mu<-rbeta(1,.1,.1)
a[t,j]<-mu*k
b[t,j]<-(1-mu)*k
th[t,j]<-rbeta(1,a[t,j]+unos,b[t,j]+dif)
wy[t,j]<-rbernoulli(1,th[t,j])
}
}
th
hist(th[,1])
hist(th[,2])
hist(th[,3])
mean(th[,1])
mean(th[,2])
mean(th[,3])
mean(wy[,3])
mean(wy[,2])
mean(wy[,1])
m<-3
N<-100000
a<-matrix(0L, N, m)
b<-matrix(0L, N, m)
th<-matrix(0L, N, m)
wy<-matrix(0L, N, m)
for(j in 1:m){
ky<-frax[frax$Segmento==j,8]
unos<-sum(ky)
dif<-length(ky)-unos
#a<-rep(0,N)
#b<-rep(0,N)
#th<-rep(0,N)
for (t in 1:N){
k<-rgamma(1,1,.01)
mu<-rbeta(1,.1,.1)
a[t,j]<-mu*k
b[t,j]<-(1-mu)*k
th[t,j]<-rbeta(1,a[t,j]+unos,b[t,j]+dif)
wy[t,j]<-rbernoulli(1,th[t,j])
}
}
hist(wy[,1])
hist(th[,1])
men(th[,1])
mean(th[,1])
mean(th[,2])
hist(th[,2])
mean(th[,3])
hist(th[,3])
a
#y<-frax$fraudRisk
m<-3
N<-100000
a<-matrix(0L, N, m)
b<-matrix(0L, N, m)
th<-matrix(0L, N, m)
wy<-matrix(0L, N, m)
for(j in 1:m){
ky<-frax[frax$Segmento==j,8]
unos<-sum(ky)
dif<-length(ky)-unos
#a<-rep(0,N)
#b<-rep(0,N)
#th<-rep(0,N)
for (t in 1:N){
k<-rgamma(1,.01,.01)
mu<-rbeta(1,.1,.1)
a[t,j]<-mu*k
b[t,j]<-(1-mu)*k
th[t,j]<-rbeta(1,a[t,j]+unos,b[t,j]+dif)
wy[t,j]<-rbernoulli(1,th[t,j])
}
}
mean(th[,3])
mean(th[,2])
mean(th[,1])
?traceplot
plot(th[,1])
plot(th[,1],type = 'l')
plot(th[,2],type = 'l')
plot(th[,3],type = 'l')
plot(th[10001:N,3],type = 'l')
rm(list=ls())
setwd('/home/abraham/FE2018/proyfin')
getwd()
# Cargamos librerías y leemos base de datos
library(tidyverse)
library(readr)
library(knitr)
library(stringr)
library(lubridate)
library(egg)
library(ggplot2)
library(Amelia)
library(R2jags)
library(gridExtra)
library(caret)
frax<-read.csv("d4a_fraud_data.txt",header = TRUE)
frax<-frax%>%select(gender,state,cardholder,balance,numTrans,numIntlTrans,creditLine,fraudRisk)
head(frax)
getwd()
setwd('/home/abraham/FE2018/proyfin/')
getwd()
frax<-read.csv("d4a_fraud_data.txt",header = TRUE)
frax<-read.csv("d4a_fraud_data.csv",header = TRUE)
frax<-frax%>%select(gender,state,cardholder,balance,numTrans,numIntlTrans,creditLine,fraudRisk)
head(frax)
## ANÁLISIS EXPLORATORIO
#Summary
as.table(summary(frax))
#Boxplot balance
ggplot(frax, aes(x=as.character(fraudRisk), y=balance)) +
geom_boxplot() +
scale_fill_manual(values=c("darkcyan", "magenta"))+xlab("fraudRisk")+theme_minimal()
#Boxplot numTrans
ggplot(frax, aes(x=as.character(fraudRisk), y=numTrans)) +
geom_boxplot() +
scale_fill_manual(values=c("darkcyan", "magenta"))+xlab("fraudRisk")+theme_minimal()
#Boxplot creditLine
ggplot(frax, aes(x=as.character(fraudRisk), y=creditLine)) +
geom_boxplot() +
scale_fill_manual(values=c("darkcyan", "magenta"))+theme_minimal()+xlab("fraudRisk")
#Boxplot numItlTrans
ggplot(frax, aes(x=as.character(fraudRisk), y=numIntlTrans)) +
geom_boxplot() +
scale_fill_manual(values=c("darkcyan", "magenta"))+xlab("fraudRisk")+theme_minimal()
#Gráfica fraude por género
ggplot(frax, aes(x=as.character(gender), fill=as.character(fraudRisk))) +
geom_bar() +
scale_fill_manual(values=c("darkcyan", "magenta"))+xlab("gender")+theme_minimal()
#Boxplots creditLine - cardholder
ggplot(frax, aes(x=as.character(fraudRisk), y=creditLine)) +
geom_boxplot() + facet_grid(~as.character(cardholder))+
scale_fill_manual(values=c("darkcyan", "magenta")) +xlab("fraudRisk")+theme_minimal()
#Gráfica correlaciones
library(corrplot)
M <- cor(frax)
corrplot(M, method = "circle")
## SEGMENTOS
#Segmentación variable balance
library(Hmisc)
x <- frax$balance  # some data
quintiles <- quantile(x, probs=seq(0.2, 1, by = 0.2))
new<-cut(x, quintiles, ordered = TRUE,label=1:4)#quantile(x,quintiles)
new[is.na(new)] <- 1
frax$balance_q<-new
quint1<-cut2(frax$balance,g=5)
tab_quint1<-table(quint1)
tab_quint_b<-cbind(c("[0,2822)",names(tab_quint1[3:5])),c(sum(tab_quint1[1:2]),tab_quint1[3:5]))
colnames(tab_quint_b)<-c("segmento","no. clientes")
rownames(tab_quint_b)<-c(1:4)
library(dplyr)
tab_bal<-frax%>%group_by(balance_q)%>%summarise(ctes=n(),tasa_f=round(mean(fraudRisk)*100,2),total_f=sum(fraudRisk))%>%
mutate(proporcion_f=round(total_f/sum(total_f)*100,2),proporcion_ctes=round(ctes/sum(ctes)*100,2))
tab_bal<-cbind(tab_quint_b[,1],tab_bal)
tab_bal<-tab_bal %>% select(c(2,1,3,4,5,6,7))
names(tab_bal)[2]<-"segmento"
kable(tab_bal)
#Segmentación variable creditline
x <- frax$creditLine  # some data
quintiles2 <- quantile(x, probs=seq(0, 1, by = 0.25))
new2<-cut(x, quintiles2, ordered = TRUE,label=1:4)#quantile(x,quintiles)
new2[is.na(new2)] <- 1
frax$credl_q<-new2
quint2<-cut2(frax$creditLine,g=4)
tab_quint2<-table(quint2)
tab_cred<-frax%>%group_by(credl_q)%>%summarise(ctes=n(),tasa_f=round(mean(fraudRisk)*100,2),total_f=sum(fraudRisk))%>%
mutate(proporcion_f=round(total_f/sum(total_f)*100,2),proporcion_ctes=round(ctes/sum(ctes)*100,2))
tab_cred<-cbind(names(tab_quint2),tab_cred)
tab_cred<-tab_cred %>% select(c(2,1,3,4,5,6,7))
names(tab_cred)[2]<-"segmento"
kable(tab_cred)
#Boxplot segmentos
ggplot(frax, aes(x=as.character(fraudRisk), y=balance)) +
geom_boxplot() + facet_grid(~credl_q)+
scale_fill_manual(values=c("darkcyan", "magenta")) + xlab("fraudRisk")+theme_minimal()
#Segmentación conjunta
seg<-frax%>%group_by(balance_q,credl_q)%>%summarise(ctes=n(),tasa_f=round(mean(fraudRisk)*100,2),
total_f=sum(fraudRisk))
tab<-seg%>%mutate(proporcion_f=round(total_f/6058*100,2),
proporcion_ctes=round(ctes/100000*100,2))%>%arrange(desc(proporcion_f))
kable(tab)
frax$Segmento<-ifelse(frax$balance_q==4 & frax$credl_q==4,"Alto",
ifelse(as.numeric(frax$balance_q)*as.numeric(frax$credl_q)==12,"Medio","Bajo"))
tab0<-frax%>%group_by(Segmento)%>%summarise(ctes=n(),tasa_f=round(mean(fraudRisk)*100,2),total_f=sum(fraudRisk))%>%
mutate(proporcion_f=round(total_f/sum(total_f)*100,2),proporcion_ctes=round(ctes/sum(ctes)*100,2))
kable(tab0)
write.csv(frax, file = "frax.csv")
## MODELOS JERÁRQUICOS
#Arreglo variables dummys
frax$gender[which(frax$gender==2)]=0
frax$cardholder[which(frax$cardholder==2)]=0
frax$Segmento[which(frax$Segmento=="Alto")]=1
frax$Segmento[which(frax$Segmento=="Medio")]=2
frax$Segmento[which(frax$Segmento=="Bajo")]=3
write.csv(frax, file = "frax.csv")
## Modelo beta-bernoulli
fraude_jerarquico3 <- '
model
{
#Verosimilitud
for (i in 1:n) {
y[i] ~ dbern(p[seg[i]])
}
#Priors
for (j in 1:m) { p[j] ~ dbeta(a,b) }
a ~ dgamma(0.01,0.01)
b ~ dgamma(0.01,0.01)
#Predicción
for (i in 1:n) { yf1[i] ~ dbern(p[seg[i]]) }
#Parametro de interés
eta <- a/(a+b)
}
'
cat(fraude_jerarquico3, file = 'fraude_jerarquico3')
n<-dim(frax)[1]
m<-length(unique(frax$Segmento))
#-Defining data-
data<-list("n"=n,"m"=m,"y"=frax$fraudRisk,"seg"=frax$Segmento)
#-Defining inits-
inits<-function(){list(p=rep(0,m),a=1,b=1,yf1=rep(0,n))}
#-Selecting parameters to monitor-
parameters<-c("p","eta","yf1")
modelo_jer3<-jags(data,inits,parameters,model.file="fraude_jerarquico3",
n.iter=200,n.chains=1,n.burnin=50,n.thin = 1)
#Clasificación global
out.jer3<-modelo_jer3$BUGSoutput$sims.list
out.sum.jer3<-modelo_jer3$BUGSoutput$summary
out.yf.jer3<-out.sum.jer3[grep("yf1",rownames(out.sum.jer3)),]
base_graf.jer3<-as.data.frame(cbind(frax,out.yf.jer3[,c(1,3,7)]))
kable(prop.table(table(base_graf.jer3$fraudRisk,round(base_graf.jer3$mean)),2))
#Clasificación por segmento
alto3<-filter(base_graf.jer3,Segmento==1)
kable(prop.table(table(alto3$fraudRisk,round(alto3$mean)),2))
medio3<-filter(base_graf.jer3,Segmento==2)
kable(prop.table(table(medio3$fraudRisk,round(medio3$mean)),2))
bajo3<-filter(base_graf.jer3,Segmento==3)
kable(prop.table(table(bajo3$fraudRisk,round(bajo3$mean)),2))
## Modelo lineal generalizado con efectos independientes
fraude_jerarquico0 <- '
model
{
#Verosimilitud
for (i in 1:n){
y[i] ~ dbern(p[i])
logit(p[i])<-alpha[seg[i]]+beta1[seg[i]]*x1[1]+beta2[seg[i]]*x2[i]+beta3[seg[i]]*x3[i]+beta4[seg[i]]*x4[i]+beta5[seg[i]]*x5[i]+beta6[seg[i]]*x6[i]
}
#Priors
for (j in 1:m){
alpha[j] ~ dnorm(0,0.001)
beta1[j] ~ dnorm(0,0.001)
beta2[j] ~ dnorm(0,0.001)
beta3[j] ~ dnorm(0,0.001)
beta4[j] ~ dnorm(0,0.001)
beta5[j] ~ dnorm(0,0.001)
beta6[j] ~ dnorm(0,0.001)
}
#Predicción
for (i in 1:n) { yf1[i] ~ dbern(p[i]) }
}
'
cat(fraude_jerarquico0, file = 'fraude_jerarquico0')
n<-dim(frax)[1]
m<-length(unique(frax$Segmento))
#-Defining data-
data<-list("n"=n,"m"=m,"y"=frax$fraudRisk,"seg"=frax$Segmento,"x1"=frax$gender,"x2"=frax$cardholder,"x3"=frax$balance,"x4"=frax$numTrans,"x5"=frax$numIntlTrans,"x6"=frax$creditLine)
#-Defining inits-
inits<-function(){list(alpha=rep(0,m),beta1=rep(0,m),beta2=rep(0,m),beta3=rep(0,m),beta4=rep(0,m),beta5=rep(0,m),beta6=rep(0,m),yf1=rep(1,n))}
#-Selecting parameters to monitor-
parameters<-c("p","alpha","beta1","beta2","beta3","beta4","beta5","beta6","yf1")
modelo_jer0<-jags(data,inits,parameters,model.file="fraude_jerarquico0",
n.iter=200,n.chains=1,n.burnin=50,n.thin = 1)
#Clasificación global
out.jer0<-modelo_jer0$BUGSoutput$sims.list
out.sum.jer0<-modelo_jer0$BUGSoutput$summary
out.yf.jer0<-out.sum.jer0[grep("yf1",rownames(out.sum.jer0)),]
base_graf.jer0<-as.data.frame(cbind(frax,out.yf.jer0[,c(1,3,7)]))
kable(prop.table(table(base_graf.jer0$fraudRisk,round(base_graf.jer0$mean)),2))
#Clasificación por segmento
alto<-filter(base_graf.jer0,Segmento==1)
kable(prop.table(table(alto$fraudRisk,round(alto$mean)),2))
medio<-filter(base_graf.jer0,Segmento==2)
kable(prop.table(table(medio$fraudRisk,round(medio$mean)),2))
bajo<-filter(base_graf.jer0,Segmento==3)
kable(prop.table(table(bajo$fraudRisk,round(bajo$mean)),2))
## Modelo lineal generalizado con efectos intercambiables
fraude_jerarquico1 <- '
model
{
#Verosimilitud
for (i in 1:n){
y[i] ~ dbern(p[i])
logit(p[i])<-alpha[seg[i]]+beta1[seg[i]]*x1[i]+beta2[seg[i]]*x2[i]+beta3[seg[i]]*x3[i]+beta4[seg[i]]*x4[i]+beta5[seg[i]]*x5[i]+beta6[seg[i]]*x6[i]
}
#Priors
for (j in 1:m){
alpha[j] ~ dnorm(0,tau)
beta1[j] ~ dnorm(0,tau)
beta2[j] ~ dnorm(0,tau)
beta3[j] ~ dnorm(0,tau)
beta4[j] ~ dnorm(0,tau)
beta5[j] ~ dnorm(0,tau)
beta6[j] ~ dnorm(0,tau)
}
# Hyperprior
tau ~ dgamma(0.001,0.001)
#Predicción
for (i in 1:n) { yf1[i] ~ dbern(p[i]) }
}
'
cat(fraude_jerarquico1, file = 'fraude_jerarquico1')
n<-dim(frax)[1]
m<-length(unique(frax$Segmento))
#-Defining data-
data<-list("n"=n,"m"=m,"y"=frax$fraudRisk,"seg"=frax$Segmento,"x1"=frax$gender,"x2"=frax$cardholder,"x3"=frax$balance,"x4"=frax$numTrans,"x5"=frax$numIntlTrans,"x6"=frax$creditLine)
#-Defining inits-
inits<-function(){list(alpha=rep(0,m),beta1=rep(0,m),beta2=rep(0,m),beta3=rep(0,m),beta4=rep(0,m),beta5=rep(0,m),beta6=rep(0,m),a=1,b=1,yf1=rep(1,n))}
#-Selecting parameters to monitor-
parameters<-c("p","alpha","beta1","beta2","beta3","beta4","beta5","beta6","yf1")
modelo_jer1<-jags(data,inits,parameters,model.file="fraude_jerarquico1",
n.iter=200,n.chains=1,n.burnin=50,n.thin = 1)
# Graficas para ver comportamiento de los parametros estimados
out.jer1<-modelo_jer1$BUGSoutput$sims.list
#alphas
alpha.1<-out.jer1$alpha
colnames(alpha.1)<-c("alpha_Alto","alpha_Medio","alpha_Bajo")
alpha.1<-as.data.frame(alpha.1)
graf1<-alpha.1%>% gather() %>% ggplot(aes(x = value, fill = key)) +
geom_histogram(alpha = .3) +
scale_fill_discrete()+ theme(legend.position = "bottom")+
theme(legend.title=element_blank())+theme(legend.text= element_text(size=7))
alpha1.1<-as.data.frame(cbind(1:150,alpha.1))
colnames(alpha1.1)[1]<-"itera"
graf2<-alpha1.1 %>% gather("parametro_segmento","valor",2:4) %>% ggplot(aes(x=itera,y=valor,color=parametro_segmento)) + geom_line(alpha=0.6)+
scale_fill_discrete(breaks = c("alpha_Alto","alpha_Medio","alpha_Bajo"),labels= c("alpha_Alto","alpha_Medio","alpha_Bajo"))+ theme(legend.position = "bottom")+
theme(legend.title=element_blank())+theme(legend.text= element_text(size=7))
ggarrange(graf1,graf2,ncol=2)
#beta1
beta1.1<-out.jer1$beta1
colnames(beta1.1)<-c("beta1_Alto","beta1_Medio","beta1_Bajo")
beta1.1<-as.data.frame(beta1.1)
graf1<-beta1.1%>% gather() %>% ggplot(aes(x = value, fill = key)) +
geom_histogram(alpha = .3) +
scale_fill_discrete()+ theme(legend.position = "bottom")+
theme(legend.title=element_blank())+theme(legend.text= element_text(size=7))
beta.1.1<-as.data.frame(cbind(1:150,beta1.1))
colnames(beta.1.1)[1]<-"itera"
graf2<-beta.1.1 %>% gather("parametro_segmento","valor",2:4) %>% ggplot(aes(x=itera,y=valor,color=parametro_segmento)) + geom_line(alpha=0.6)+
scale_fill_discrete(breaks = c("beta1_Alto","beta1_Medio","beta1_Bajo"),labels= c("beta1_Alto","beta1_Medio","beta1_Bajo"))+ theme(legend.position = "bottom")+
theme(legend.title=element_blank())+theme(legend.text= element_text(size=7))
